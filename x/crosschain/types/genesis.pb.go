// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: fx/gravity/crosschain/v1/genesis.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GenesisState struct
type GenesisState struct {
	Params                    Params                  `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
	LastObservedEventNonce    uint64                  `protobuf:"varint,2,opt,name=last_observed_event_nonce,json=lastObservedEventNonce,proto3" json:"last_observed_event_nonce,omitempty"`
	LastObservedBlockHeight   LastObservedBlockHeight `protobuf:"bytes,3,opt,name=last_observed_block_height,json=lastObservedBlockHeight,proto3" json:"last_observed_block_height"`
	Oracles                   []Oracle                `protobuf:"bytes,4,rep,name=oracles,proto3" json:"oracles"`
	OracleSets                []OracleSet             `protobuf:"bytes,5,rep,name=oracle_sets,json=oracleSets,proto3" json:"oracle_sets"`
	BridgeTokens              []BridgeToken           `protobuf:"bytes,6,rep,name=bridge_tokens,json=bridgeTokens,proto3" json:"bridge_tokens"`
	UnbatchedTransfers        []OutgoingTransferTx    `protobuf:"bytes,7,rep,name=unbatched_transfers,json=unbatchedTransfers,proto3" json:"unbatched_transfers"`
	Batches                   []OutgoingTxBatch       `protobuf:"bytes,8,rep,name=batches,proto3" json:"batches"`
	OracleSetConfirms         []MsgOracleSetConfirm   `protobuf:"bytes,9,rep,name=oracle_set_confirms,json=oracleSetConfirms,proto3" json:"oracle_set_confirms"`
	BatchConfirms             []MsgConfirmBatch       `protobuf:"bytes,10,rep,name=batch_confirms,json=batchConfirms,proto3" json:"batch_confirms"`
	Attestations              []Attestation           `protobuf:"bytes,11,rep,name=attestations,proto3" json:"attestations"`
	ProposalOracle            ProposalOracle          `protobuf:"bytes,12,opt,name=proposal_oracle,json=proposalOracle,proto3" json:"proposal_oracle"`
	LastObservedOracleSet     OracleSet               `protobuf:"bytes,13,opt,name=last_observed_oracle_set,json=lastObservedOracleSet,proto3" json:"last_observed_oracle_set"`
	LastSlashedBatchBlock     uint64                  `protobuf:"varint,14,opt,name=last_slashed_batch_block,json=lastSlashedBatchBlock,proto3" json:"last_slashed_batch_block,omitempty"`
	LastSlashedOracleSetNonce uint64                  `protobuf:"varint,15,opt,name=last_slashed_oracle_set_nonce,json=lastSlashedOracleSetNonce,proto3" json:"last_slashed_oracle_set_nonce,omitempty"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_bd0b0614f1c38c8a, []int{0}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func (m *GenesisState) GetLastObservedEventNonce() uint64 {
	if m != nil {
		return m.LastObservedEventNonce
	}
	return 0
}

func (m *GenesisState) GetLastObservedBlockHeight() LastObservedBlockHeight {
	if m != nil {
		return m.LastObservedBlockHeight
	}
	return LastObservedBlockHeight{}
}

func (m *GenesisState) GetOracles() []Oracle {
	if m != nil {
		return m.Oracles
	}
	return nil
}

func (m *GenesisState) GetOracleSets() []OracleSet {
	if m != nil {
		return m.OracleSets
	}
	return nil
}

func (m *GenesisState) GetBridgeTokens() []BridgeToken {
	if m != nil {
		return m.BridgeTokens
	}
	return nil
}

func (m *GenesisState) GetUnbatchedTransfers() []OutgoingTransferTx {
	if m != nil {
		return m.UnbatchedTransfers
	}
	return nil
}

func (m *GenesisState) GetBatches() []OutgoingTxBatch {
	if m != nil {
		return m.Batches
	}
	return nil
}

func (m *GenesisState) GetOracleSetConfirms() []MsgOracleSetConfirm {
	if m != nil {
		return m.OracleSetConfirms
	}
	return nil
}

func (m *GenesisState) GetBatchConfirms() []MsgConfirmBatch {
	if m != nil {
		return m.BatchConfirms
	}
	return nil
}

func (m *GenesisState) GetAttestations() []Attestation {
	if m != nil {
		return m.Attestations
	}
	return nil
}

func (m *GenesisState) GetProposalOracle() ProposalOracle {
	if m != nil {
		return m.ProposalOracle
	}
	return ProposalOracle{}
}

func (m *GenesisState) GetLastObservedOracleSet() OracleSet {
	if m != nil {
		return m.LastObservedOracleSet
	}
	return OracleSet{}
}

func (m *GenesisState) GetLastSlashedBatchBlock() uint64 {
	if m != nil {
		return m.LastSlashedBatchBlock
	}
	return 0
}

func (m *GenesisState) GetLastSlashedOracleSetNonce() uint64 {
	if m != nil {
		return m.LastSlashedOracleSetNonce
	}
	return 0
}

func init() {
	proto.RegisterType((*GenesisState)(nil), "fx.gravity.crosschain.v1.GenesisState")
}

func init() {
	proto.RegisterFile("fx/gravity/crosschain/v1/genesis.proto", fileDescriptor_bd0b0614f1c38c8a)
}

var fileDescriptor_bd0b0614f1c38c8a = []byte{
	// 622 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x94, 0x5d, 0x4f, 0xd4, 0x4c,
	0x14, 0xc7, 0xb7, 0x0f, 0x3c, 0x20, 0xc3, 0x02, 0x71, 0x7c, 0x1b, 0x36, 0xb1, 0xae, 0xaf, 0xc1,
	0x44, 0xda, 0xa0, 0x17, 0xc6, 0x1b, 0x83, 0x6b, 0x8c, 0x62, 0x44, 0x08, 0x10, 0x4d, 0xbc, 0x69,
	0xa6, 0x65, 0xda, 0x6d, 0x28, 0x33, 0xcd, 0x9c, 0xd9, 0x4d, 0xf9, 0x16, 0x7e, 0x2c, 0x2e, 0xb9,
	0x31, 0xf1, 0xca, 0x18, 0xf6, 0x8b, 0x98, 0x4e, 0xa7, 0xdb, 0xae, 0xb1, 0xbb, 0x7a, 0x37, 0x39,
	0xe7, 0xfc, 0x7f, 0xf3, 0xef, 0xe9, 0x9c, 0x83, 0x1e, 0x85, 0x99, 0x1b, 0x49, 0x3a, 0x8c, 0xd5,
	0x99, 0x1b, 0x48, 0x01, 0x10, 0xf4, 0x69, 0xcc, 0xdd, 0xe1, 0x96, 0x1b, 0x31, 0xce, 0x20, 0x06,
	0x27, 0x95, 0x42, 0x09, 0x4c, 0xc2, 0xcc, 0x31, 0x75, 0x4e, 0x55, 0xe7, 0x0c, 0xb7, 0x3a, 0x77,
	0x1b, 0x09, 0x2a, 0x2b, 0xc4, 0x9d, 0x07, 0xcd, 0x25, 0x67, 0x29, 0x33, 0x57, 0x74, 0xae, 0x47,
	0x22, 0x12, 0xfa, 0xe8, 0xe6, 0xa7, 0x22, 0x7a, 0xef, 0xdb, 0x12, 0x6a, 0xbf, 0x2d, 0xac, 0x1c,
	0x2a, 0xaa, 0x18, 0x7e, 0x89, 0x16, 0x52, 0x2a, 0xe9, 0x29, 0x10, 0xab, 0x6b, 0x6d, 0x2c, 0x3f,
	0xed, 0x3a, 0x4d, 0xd6, 0x9c, 0x7d, 0x5d, 0xd7, 0x9b, 0x3f, 0xff, 0x71, 0xa7, 0x75, 0x60, 0x54,
	0xf8, 0x05, 0x5a, 0x4f, 0x28, 0x28, 0x4f, 0xf8, 0xc0, 0xe4, 0x90, 0x1d, 0x7b, 0x6c, 0xc8, 0xb8,
	0xf2, 0xb8, 0xe0, 0x01, 0x23, 0xff, 0x75, 0xad, 0x8d, 0xf9, 0x83, 0x9b, 0x79, 0xc1, 0x9e, 0xc9,
	0xbf, 0xc9, 0xd3, 0x1f, 0xf3, 0x2c, 0x56, 0xa8, 0x33, 0x29, 0xf5, 0x13, 0x11, 0x9c, 0x78, 0x7d,
	0x16, 0x47, 0x7d, 0x45, 0xe6, 0xb4, 0x9d, 0xad, 0x66, 0x3b, 0x1f, 0x6a, 0xd4, 0x5e, 0xae, 0x7c,
	0xa7, 0x85, 0xc6, 0xdf, 0xad, 0xe4, 0xcf, 0x69, 0xbc, 0x8d, 0x16, 0x85, 0xa4, 0x41, 0xc2, 0x80,
	0xcc, 0x77, 0xe7, 0xa6, 0x7f, 0xf1, 0x9e, 0x2e, 0x34, 0xc4, 0x52, 0x86, 0xdf, 0xa3, 0xe5, 0xe2,
	0xe8, 0x01, 0x53, 0x40, 0xfe, 0xd7, 0x94, 0xfb, 0xb3, 0x28, 0x87, 0xac, 0xb4, 0x86, 0x44, 0x19,
	0x00, 0xbc, 0x8f, 0x56, 0x7c, 0x19, 0x1f, 0x47, 0xcc, 0x53, 0xe2, 0x84, 0x71, 0x20, 0x0b, 0x9a,
	0xf6, 0xb0, 0x99, 0xd6, 0xd3, 0xe5, 0x47, 0x79, 0xb5, 0xe1, 0xb5, 0xfd, 0x2a, 0x04, 0x38, 0x40,
	0xd7, 0x06, 0xdc, 0xa7, 0x2a, 0xe8, 0xb3, 0x63, 0x4f, 0x49, 0xca, 0x21, 0x64, 0x12, 0xc8, 0xa2,
	0xe6, 0x3e, 0x99, 0xe2, 0x72, 0xa0, 0x22, 0x11, 0xf3, 0xe8, 0xc8, 0x48, 0x8e, 0x32, 0x83, 0xc7,
	0x63, 0x5c, 0x99, 0x02, 0xbc, 0x83, 0x16, 0x8b, 0x18, 0x90, 0x2b, 0x1a, 0xfc, 0xf8, 0x2f, 0xc0,
	0x59, 0x2f, 0x97, 0x94, 0xdd, 0x34, 0xfa, 0xdc, 0x6f, 0xd5, 0x4d, 0x2f, 0x10, 0x3c, 0x8c, 0xe5,
	0x29, 0x90, 0x25, 0x8d, 0xdd, 0x6c, 0xc6, 0xee, 0x42, 0x34, 0x6e, 0xec, 0xeb, 0x42, 0x65, 0xd0,
	0x57, 0xc5, 0x6f, 0x71, 0xc0, 0x9f, 0xd0, 0xaa, 0xbe, 0xaf, 0xe2, 0xa3, 0x59, 0xb6, 0x77, 0x21,
	0x2a, 0xb1, 0x35, 0xdb, 0x2b, 0x1a, 0x33, 0xe6, 0xee, 0xa1, 0x36, 0x55, 0x8a, 0x81, 0xa2, 0x2a,
	0x16, 0x1c, 0xc8, 0xf2, 0xac, 0xbf, 0xf7, 0xaa, 0xaa, 0x2e, 0xff, 0x5e, 0x1d, 0x80, 0x3f, 0xa3,
	0xb5, 0x54, 0x8a, 0x54, 0x00, 0x4d, 0xbc, 0xe2, 0x33, 0x48, 0x5b, 0x0f, 0xc2, 0xc6, 0x94, 0xb9,
	0x34, 0x82, 0x89, 0xd7, 0xba, 0x9a, 0x4e, 0x44, 0xb1, 0x8f, 0xc8, 0xe4, 0xb0, 0x55, 0x4d, 0x27,
	0x2b, 0xfa, 0x86, 0x7f, 0x78, 0xc1, 0x37, 0xea, 0xc3, 0x35, 0x4e, 0xe2, 0xe7, 0xe6, 0x0e, 0x48,
	0x28, 0xe4, 0xaf, 0xaf, 0x68, 0xb9, 0x9e, 0x6a, 0xb2, 0xaa, 0x57, 0x81, 0x16, 0x1e, 0x16, 0xe9,
	0xa2, 0xad, 0x79, 0x12, 0x6f, 0xa3, 0xdb, 0x13, 0xc2, 0xda, 0x83, 0x28, 0x16, 0xc9, 0x9a, 0x56,
	0xaf, 0xd7, 0xd4, 0xe3, 0x5b, 0xf5, 0x2e, 0xe9, 0xed, 0x9c, 0x5f, 0xda, 0xd6, 0xc5, 0xa5, 0x6d,
	0xfd, 0xbc, 0xb4, 0xad, 0xaf, 0x23, 0xbb, 0x75, 0x31, 0xb2, 0x5b, 0xdf, 0x47, 0x76, 0xeb, 0x8b,
	0x1b, 0xc5, 0xaa, 0x3f, 0xf0, 0x9d, 0x40, 0x9c, 0xba, 0xe1, 0x80, 0x07, 0x79, 0x9f, 0x33, 0x37,
	0xcc, 0x36, 0x03, 0x21, 0x99, 0x9b, 0xd5, 0x37, 0xa8, 0x5e, 0x9f, 0xfe, 0x82, 0xde, 0x94, 0xcf,
	0x7e, 0x05, 0x00, 0x00, 0xff, 0xff, 0x7d, 0x01, 0xa3, 0x74, 0xcc, 0x05, 0x00, 0x00,
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastSlashedOracleSetNonce != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.LastSlashedOracleSetNonce))
		i--
		dAtA[i] = 0x78
	}
	if m.LastSlashedBatchBlock != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.LastSlashedBatchBlock))
		i--
		dAtA[i] = 0x70
	}
	{
		size, err := m.LastObservedOracleSet.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x6a
	{
		size, err := m.ProposalOracle.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x62
	if len(m.Attestations) > 0 {
		for iNdEx := len(m.Attestations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Attestations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	if len(m.BatchConfirms) > 0 {
		for iNdEx := len(m.BatchConfirms) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BatchConfirms[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.OracleSetConfirms) > 0 {
		for iNdEx := len(m.OracleSetConfirms) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OracleSetConfirms[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.Batches) > 0 {
		for iNdEx := len(m.Batches) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Batches[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.UnbatchedTransfers) > 0 {
		for iNdEx := len(m.UnbatchedTransfers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UnbatchedTransfers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.BridgeTokens) > 0 {
		for iNdEx := len(m.BridgeTokens) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BridgeTokens[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.OracleSets) > 0 {
		for iNdEx := len(m.OracleSets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OracleSets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Oracles) > 0 {
		for iNdEx := len(m.Oracles) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Oracles[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	{
		size, err := m.LastObservedBlockHeight.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.LastObservedEventNonce != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.LastObservedEventNonce))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if m.LastObservedEventNonce != 0 {
		n += 1 + sovGenesis(uint64(m.LastObservedEventNonce))
	}
	l = m.LastObservedBlockHeight.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if len(m.Oracles) > 0 {
		for _, e := range m.Oracles {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.OracleSets) > 0 {
		for _, e := range m.OracleSets {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.BridgeTokens) > 0 {
		for _, e := range m.BridgeTokens {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.UnbatchedTransfers) > 0 {
		for _, e := range m.UnbatchedTransfers {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.Batches) > 0 {
		for _, e := range m.Batches {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.OracleSetConfirms) > 0 {
		for _, e := range m.OracleSetConfirms {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.BatchConfirms) > 0 {
		for _, e := range m.BatchConfirms {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.Attestations) > 0 {
		for _, e := range m.Attestations {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	l = m.ProposalOracle.Size()
	n += 1 + l + sovGenesis(uint64(l))
	l = m.LastObservedOracleSet.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if m.LastSlashedBatchBlock != 0 {
		n += 1 + sovGenesis(uint64(m.LastSlashedBatchBlock))
	}
	if m.LastSlashedOracleSetNonce != 0 {
		n += 1 + sovGenesis(uint64(m.LastSlashedOracleSetNonce))
	}
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastObservedEventNonce", wireType)
			}
			m.LastObservedEventNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastObservedEventNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastObservedBlockHeight", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LastObservedBlockHeight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Oracles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Oracles = append(m.Oracles, Oracle{})
			if err := m.Oracles[len(m.Oracles)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OracleSets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OracleSets = append(m.OracleSets, OracleSet{})
			if err := m.OracleSets[len(m.OracleSets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeTokens", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BridgeTokens = append(m.BridgeTokens, BridgeToken{})
			if err := m.BridgeTokens[len(m.BridgeTokens)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbatchedTransfers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnbatchedTransfers = append(m.UnbatchedTransfers, OutgoingTransferTx{})
			if err := m.UnbatchedTransfers[len(m.UnbatchedTransfers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Batches", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Batches = append(m.Batches, OutgoingTxBatch{})
			if err := m.Batches[len(m.Batches)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OracleSetConfirms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OracleSetConfirms = append(m.OracleSetConfirms, MsgOracleSetConfirm{})
			if err := m.OracleSetConfirms[len(m.OracleSetConfirms)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchConfirms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BatchConfirms = append(m.BatchConfirms, MsgConfirmBatch{})
			if err := m.BatchConfirms[len(m.BatchConfirms)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attestations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attestations = append(m.Attestations, Attestation{})
			if err := m.Attestations[len(m.Attestations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalOracle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ProposalOracle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastObservedOracleSet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LastObservedOracleSet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastSlashedBatchBlock", wireType)
			}
			m.LastSlashedBatchBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastSlashedBatchBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastSlashedOracleSetNonce", wireType)
			}
			m.LastSlashedOracleSetNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastSlashedOracleSetNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
