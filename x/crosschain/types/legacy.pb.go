// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: fx/gravity/crosschain/v1/legacy.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/codec/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Deprecated: after block 5713000
type InitCrossChainParamsProposal struct {
	Title       string  `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description string  `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Params      *Params `protobuf:"bytes,3,opt,name=params,proto3" json:"params,omitempty"`
	ChainName   string  `protobuf:"bytes,4,opt,name=chain_name,json=chainName,proto3" json:"chain_name,omitempty"`
}

func (m *InitCrossChainParamsProposal) Reset()      { *m = InitCrossChainParamsProposal{} }
func (*InitCrossChainParamsProposal) ProtoMessage() {}
func (*InitCrossChainParamsProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_26110436a8f12cc1, []int{0}
}
func (m *InitCrossChainParamsProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InitCrossChainParamsProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InitCrossChainParamsProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InitCrossChainParamsProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InitCrossChainParamsProposal.Merge(m, src)
}
func (m *InitCrossChainParamsProposal) XXX_Size() int {
	return m.Size()
}
func (m *InitCrossChainParamsProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_InitCrossChainParamsProposal.DiscardUnknown(m)
}

var xxx_messageInfo_InitCrossChainParamsProposal proto.InternalMessageInfo

// Deprecated: Do not use.
type UpdateChainOraclesProposal struct {
	// the title of the update proposal
	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	// the description of the proposal
	Description string   `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Oracles     []string `protobuf:"bytes,3,rep,name=oracles,proto3" json:"oracles,omitempty"`
	ChainName   string   `protobuf:"bytes,4,opt,name=chain_name,json=chainName,proto3" json:"chain_name,omitempty"`
}

func (m *UpdateChainOraclesProposal) Reset()      { *m = UpdateChainOraclesProposal{} }
func (*UpdateChainOraclesProposal) ProtoMessage() {}
func (*UpdateChainOraclesProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_26110436a8f12cc1, []int{1}
}
func (m *UpdateChainOraclesProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateChainOraclesProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateChainOraclesProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateChainOraclesProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateChainOraclesProposal.Merge(m, src)
}
func (m *UpdateChainOraclesProposal) XXX_Size() int {
	return m.Size()
}
func (m *UpdateChainOraclesProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateChainOraclesProposal.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateChainOraclesProposal proto.InternalMessageInfo

// Deprecated: after block 5713000
type MsgSetOrchestratorAddress struct {
	OracleAddress   string     `protobuf:"bytes,1,opt,name=oracle_address,json=oracleAddress,proto3" json:"oracle_address,omitempty"`
	BridgerAddress  string     `protobuf:"bytes,2,opt,name=bridger_address,json=bridgerAddress,proto3" json:"bridger_address,omitempty"`
	ExternalAddress string     `protobuf:"bytes,3,opt,name=external_address,json=externalAddress,proto3" json:"external_address,omitempty"`
	Deposit         types.Coin `protobuf:"bytes,4,opt,name=deposit,proto3" json:"deposit"`
	ChainName       string     `protobuf:"bytes,5,opt,name=chain_name,json=chainName,proto3" json:"chain_name,omitempty"`
}

func (m *MsgSetOrchestratorAddress) Reset()         { *m = MsgSetOrchestratorAddress{} }
func (m *MsgSetOrchestratorAddress) String() string { return proto.CompactTextString(m) }
func (*MsgSetOrchestratorAddress) ProtoMessage()    {}
func (*MsgSetOrchestratorAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_26110436a8f12cc1, []int{2}
}
func (m *MsgSetOrchestratorAddress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetOrchestratorAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetOrchestratorAddress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetOrchestratorAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetOrchestratorAddress.Merge(m, src)
}
func (m *MsgSetOrchestratorAddress) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetOrchestratorAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetOrchestratorAddress.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetOrchestratorAddress proto.InternalMessageInfo

func (m *MsgSetOrchestratorAddress) GetOracleAddress() string {
	if m != nil {
		return m.OracleAddress
	}
	return ""
}

func (m *MsgSetOrchestratorAddress) GetBridgerAddress() string {
	if m != nil {
		return m.BridgerAddress
	}
	return ""
}

func (m *MsgSetOrchestratorAddress) GetExternalAddress() string {
	if m != nil {
		return m.ExternalAddress
	}
	return ""
}

func (m *MsgSetOrchestratorAddress) GetDeposit() types.Coin {
	if m != nil {
		return m.Deposit
	}
	return types.Coin{}
}

func (m *MsgSetOrchestratorAddress) GetChainName() string {
	if m != nil {
		return m.ChainName
	}
	return ""
}

// Deprecated: after block 5713000
type MsgAddOracleDeposit struct {
	OracleAddress string     `protobuf:"bytes,1,opt,name=oracle_address,json=oracleAddress,proto3" json:"oracle_address,omitempty"`
	Amount        types.Coin `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount"`
	ChainName     string     `protobuf:"bytes,3,opt,name=chain_name,json=chainName,proto3" json:"chain_name,omitempty"`
}

func (m *MsgAddOracleDeposit) Reset()         { *m = MsgAddOracleDeposit{} }
func (m *MsgAddOracleDeposit) String() string { return proto.CompactTextString(m) }
func (*MsgAddOracleDeposit) ProtoMessage()    {}
func (*MsgAddOracleDeposit) Descriptor() ([]byte, []int) {
	return fileDescriptor_26110436a8f12cc1, []int{3}
}
func (m *MsgAddOracleDeposit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddOracleDeposit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddOracleDeposit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddOracleDeposit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddOracleDeposit.Merge(m, src)
}
func (m *MsgAddOracleDeposit) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddOracleDeposit) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddOracleDeposit.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddOracleDeposit proto.InternalMessageInfo

func (m *MsgAddOracleDeposit) GetOracleAddress() string {
	if m != nil {
		return m.OracleAddress
	}
	return ""
}

func (m *MsgAddOracleDeposit) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

func (m *MsgAddOracleDeposit) GetChainName() string {
	if m != nil {
		return m.ChainName
	}
	return ""
}

// Deprecated: Please use MsgBridgeCall
type MsgSendToExternal struct {
	Sender    string     `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Dest      string     `protobuf:"bytes,2,opt,name=dest,proto3" json:"dest,omitempty"`
	Amount    types.Coin `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount"`
	BridgeFee types.Coin `protobuf:"bytes,4,opt,name=bridge_fee,json=bridgeFee,proto3" json:"bridge_fee"`
	ChainName string     `protobuf:"bytes,5,opt,name=chain_name,json=chainName,proto3" json:"chain_name,omitempty"`
}

func (m *MsgSendToExternal) Reset()         { *m = MsgSendToExternal{} }
func (m *MsgSendToExternal) String() string { return proto.CompactTextString(m) }
func (*MsgSendToExternal) ProtoMessage()    {}
func (*MsgSendToExternal) Descriptor() ([]byte, []int) {
	return fileDescriptor_26110436a8f12cc1, []int{4}
}
func (m *MsgSendToExternal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSendToExternal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSendToExternal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSendToExternal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSendToExternal.Merge(m, src)
}
func (m *MsgSendToExternal) XXX_Size() int {
	return m.Size()
}
func (m *MsgSendToExternal) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSendToExternal.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSendToExternal proto.InternalMessageInfo

func (m *MsgSendToExternal) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgSendToExternal) GetDest() string {
	if m != nil {
		return m.Dest
	}
	return ""
}

func (m *MsgSendToExternal) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

func (m *MsgSendToExternal) GetBridgeFee() types.Coin {
	if m != nil {
		return m.BridgeFee
	}
	return types.Coin{}
}

func (m *MsgSendToExternal) GetChainName() string {
	if m != nil {
		return m.ChainName
	}
	return ""
}

// Deprecated: do not use
type MsgSendToExternalResponse struct {
	OutgoingTxId uint64 `protobuf:"varint,1,opt,name=outgoing_tx_id,json=outgoingTxId,proto3" json:"outgoing_tx_id,omitempty"`
}

func (m *MsgSendToExternalResponse) Reset()         { *m = MsgSendToExternalResponse{} }
func (m *MsgSendToExternalResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSendToExternalResponse) ProtoMessage()    {}
func (*MsgSendToExternalResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_26110436a8f12cc1, []int{5}
}
func (m *MsgSendToExternalResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSendToExternalResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSendToExternalResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSendToExternalResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSendToExternalResponse.Merge(m, src)
}
func (m *MsgSendToExternalResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSendToExternalResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSendToExternalResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSendToExternalResponse proto.InternalMessageInfo

func (m *MsgSendToExternalResponse) GetOutgoingTxId() uint64 {
	if m != nil {
		return m.OutgoingTxId
	}
	return 0
}

// Deprecated: do not use
type MsgCancelSendToExternal struct {
	TransactionId uint64 `protobuf:"varint,1,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	Sender        string `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
	ChainName     string `protobuf:"bytes,3,opt,name=chain_name,json=chainName,proto3" json:"chain_name,omitempty"`
}

func (m *MsgCancelSendToExternal) Reset()         { *m = MsgCancelSendToExternal{} }
func (m *MsgCancelSendToExternal) String() string { return proto.CompactTextString(m) }
func (*MsgCancelSendToExternal) ProtoMessage()    {}
func (*MsgCancelSendToExternal) Descriptor() ([]byte, []int) {
	return fileDescriptor_26110436a8f12cc1, []int{6}
}
func (m *MsgCancelSendToExternal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancelSendToExternal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelSendToExternal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancelSendToExternal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelSendToExternal.Merge(m, src)
}
func (m *MsgCancelSendToExternal) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancelSendToExternal) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelSendToExternal.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelSendToExternal proto.InternalMessageInfo

func (m *MsgCancelSendToExternal) GetTransactionId() uint64 {
	if m != nil {
		return m.TransactionId
	}
	return 0
}

func (m *MsgCancelSendToExternal) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgCancelSendToExternal) GetChainName() string {
	if m != nil {
		return m.ChainName
	}
	return ""
}

// Deprecated: do not use
type MsgCancelSendToExternalResponse struct {
}

func (m *MsgCancelSendToExternalResponse) Reset()         { *m = MsgCancelSendToExternalResponse{} }
func (m *MsgCancelSendToExternalResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCancelSendToExternalResponse) ProtoMessage()    {}
func (*MsgCancelSendToExternalResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_26110436a8f12cc1, []int{7}
}
func (m *MsgCancelSendToExternalResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancelSendToExternalResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelSendToExternalResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancelSendToExternalResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelSendToExternalResponse.Merge(m, src)
}
func (m *MsgCancelSendToExternalResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancelSendToExternalResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelSendToExternalResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelSendToExternalResponse proto.InternalMessageInfo

// Deprecated: do not use
type MsgRequestBatch struct {
	Sender     string                `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Denom      string                `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	MinimumFee cosmossdk_io_math.Int `protobuf:"bytes,3,opt,name=minimum_fee,json=minimumFee,proto3,customtype=cosmossdk.io/math.Int" json:"minimum_fee"`
	FeeReceive string                `protobuf:"bytes,4,opt,name=fee_receive,json=feeReceive,proto3" json:"fee_receive,omitempty"`
	ChainName  string                `protobuf:"bytes,5,opt,name=chain_name,json=chainName,proto3" json:"chain_name,omitempty"`
	BaseFee    cosmossdk_io_math.Int `protobuf:"bytes,6,opt,name=base_fee,json=baseFee,proto3,customtype=cosmossdk.io/math.Int" json:"base_fee"`
}

func (m *MsgRequestBatch) Reset()         { *m = MsgRequestBatch{} }
func (m *MsgRequestBatch) String() string { return proto.CompactTextString(m) }
func (*MsgRequestBatch) ProtoMessage()    {}
func (*MsgRequestBatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_26110436a8f12cc1, []int{8}
}
func (m *MsgRequestBatch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRequestBatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRequestBatch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRequestBatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRequestBatch.Merge(m, src)
}
func (m *MsgRequestBatch) XXX_Size() int {
	return m.Size()
}
func (m *MsgRequestBatch) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRequestBatch.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRequestBatch proto.InternalMessageInfo

func (m *MsgRequestBatch) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgRequestBatch) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *MsgRequestBatch) GetFeeReceive() string {
	if m != nil {
		return m.FeeReceive
	}
	return ""
}

func (m *MsgRequestBatch) GetChainName() string {
	if m != nil {
		return m.ChainName
	}
	return ""
}

// Deprecated: do not use
type MsgRequestBatchResponse struct {
	BatchNonce uint64 `protobuf:"varint,1,opt,name=batch_nonce,json=batchNonce,proto3" json:"batch_nonce,omitempty"`
}

func (m *MsgRequestBatchResponse) Reset()         { *m = MsgRequestBatchResponse{} }
func (m *MsgRequestBatchResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRequestBatchResponse) ProtoMessage()    {}
func (*MsgRequestBatchResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_26110436a8f12cc1, []int{9}
}
func (m *MsgRequestBatchResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRequestBatchResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRequestBatchResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRequestBatchResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRequestBatchResponse.Merge(m, src)
}
func (m *MsgRequestBatchResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRequestBatchResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRequestBatchResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRequestBatchResponse proto.InternalMessageInfo

func (m *MsgRequestBatchResponse) GetBatchNonce() uint64 {
	if m != nil {
		return m.BatchNonce
	}
	return 0
}

func init() {
	proto.RegisterType((*InitCrossChainParamsProposal)(nil), "fx.gravity.crosschain.v1.InitCrossChainParamsProposal")
	proto.RegisterType((*UpdateChainOraclesProposal)(nil), "fx.gravity.crosschain.v1.UpdateChainOraclesProposal")
	proto.RegisterType((*MsgSetOrchestratorAddress)(nil), "fx.gravity.crosschain.v1.MsgSetOrchestratorAddress")
	proto.RegisterType((*MsgAddOracleDeposit)(nil), "fx.gravity.crosschain.v1.MsgAddOracleDeposit")
	proto.RegisterType((*MsgSendToExternal)(nil), "fx.gravity.crosschain.v1.MsgSendToExternal")
	proto.RegisterType((*MsgSendToExternalResponse)(nil), "fx.gravity.crosschain.v1.MsgSendToExternalResponse")
	proto.RegisterType((*MsgCancelSendToExternal)(nil), "fx.gravity.crosschain.v1.MsgCancelSendToExternal")
	proto.RegisterType((*MsgCancelSendToExternalResponse)(nil), "fx.gravity.crosschain.v1.MsgCancelSendToExternalResponse")
	proto.RegisterType((*MsgRequestBatch)(nil), "fx.gravity.crosschain.v1.MsgRequestBatch")
	proto.RegisterType((*MsgRequestBatchResponse)(nil), "fx.gravity.crosschain.v1.MsgRequestBatchResponse")
}

func init() {
	proto.RegisterFile("fx/gravity/crosschain/v1/legacy.proto", fileDescriptor_26110436a8f12cc1)
}

var fileDescriptor_26110436a8f12cc1 = []byte{
	// 903 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x55, 0xbf, 0x6f, 0x23, 0x45,
	0x14, 0xf6, 0xc6, 0x89, 0x43, 0x9e, 0xef, 0x12, 0x6e, 0x09, 0x9c, 0x63, 0x1d, 0xb6, 0x59, 0x25,
	0x22, 0x04, 0x6e, 0x57, 0x09, 0x12, 0x3f, 0x22, 0x84, 0x94, 0x04, 0x22, 0x59, 0x22, 0x77, 0x27,
	0x73, 0x34, 0x34, 0xd6, 0x78, 0xf7, 0x79, 0x3d, 0xc2, 0x3b, 0x63, 0x66, 0xc6, 0x96, 0xd3, 0x22,
	0x21, 0x21, 0x2a, 0x4a, 0x24, 0x9a, 0xf4, 0x48, 0xe8, 0x0a, 0x5a, 0x0a, 0xba, 0x2b, 0x28, 0x4e,
	0x54, 0x88, 0xe2, 0x84, 0x92, 0xe2, 0xf8, 0x33, 0xd0, 0xce, 0xcc, 0xe6, 0x36, 0x2b, 0xac, 0x24,
	0xba, 0xc6, 0xda, 0xf7, 0xbd, 0x37, 0x6f, 0xbe, 0xef, 0x7b, 0x6f, 0xbd, 0xb0, 0xd1, 0x9f, 0x06,
	0xb1, 0x20, 0x13, 0xaa, 0x8e, 0x83, 0x50, 0x70, 0x29, 0xc3, 0x01, 0xa1, 0x2c, 0x98, 0x6c, 0x07,
	0x43, 0x8c, 0x49, 0x78, 0xec, 0x8f, 0x04, 0x57, 0xdc, 0xad, 0xf5, 0xa7, 0xbe, 0x2d, 0xf3, 0x9f,
	0x97, 0xf9, 0x93, 0xed, 0xfa, 0xfa, 0xcc, 0x06, 0xea, 0x78, 0x84, 0xd2, 0x9c, 0xaf, 0xaf, 0xc6,
	0x3c, 0xe6, 0xfa, 0x31, 0x48, 0x9f, 0x2c, 0xba, 0x16, 0x73, 0x1e, 0x0f, 0x31, 0xd0, 0x51, 0x6f,
	0xdc, 0x0f, 0x08, 0xb3, 0x17, 0xd6, 0x1b, 0x21, 0x97, 0x09, 0x97, 0x41, 0x8f, 0x48, 0x0c, 0x26,
	0xdb, 0x3d, 0x54, 0x64, 0x3b, 0x08, 0x39, 0x65, 0x36, 0x7f, 0xdb, 0xe6, 0x13, 0x19, 0xa7, 0x77,
	0x25, 0x32, 0xce, 0x7a, 0x9a, 0x44, 0xd7, 0x5c, 0x66, 0x02, 0x9b, 0xba, 0x45, 0x12, 0xca, 0x78,
	0xa0, 0x7f, 0x0d, 0xe4, 0xfd, 0xe6, 0xc0, 0x9d, 0x36, 0xa3, 0xea, 0x20, 0x65, 0x7e, 0x90, 0x32,
	0x7f, 0x40, 0x04, 0x49, 0xe4, 0x03, 0xc1, 0x47, 0x5c, 0x92, 0xa1, 0xbb, 0x0a, 0x0b, 0x8a, 0xaa,
	0x21, 0xd6, 0x9c, 0x96, 0xb3, 0xb9, 0xd4, 0x31, 0x81, 0xdb, 0x82, 0x6a, 0x84, 0x32, 0x14, 0x74,
	0xa4, 0x28, 0x67, 0xb5, 0x39, 0x9d, 0xcb, 0x43, 0xee, 0x07, 0x50, 0x19, 0xe9, 0x4e, 0xb5, 0x72,
	0xcb, 0xd9, 0xac, 0xee, 0xb4, 0xfc, 0x59, 0x0e, 0xfa, 0xe6, 0xc6, 0x8e, 0xad, 0x77, 0x5f, 0x07,
	0xd0, 0xa9, 0x2e, 0x23, 0x09, 0xd6, 0xe6, 0x75, 0xeb, 0x25, 0x8d, 0xdc, 0x23, 0x09, 0xee, 0xde,
	0xf8, 0xee, 0xa4, 0x59, 0xfa, 0xf1, 0xa4, 0x59, 0xfa, 0xf7, 0xa4, 0x59, 0xf2, 0x7e, 0x72, 0xa0,
	0xfe, 0xc5, 0x28, 0x22, 0x0a, 0x35, 0xf9, 0xfb, 0x82, 0x84, 0x43, 0x7c, 0x71, 0xf6, 0x35, 0x58,
	0xe4, 0xa6, 0x55, 0xad, 0xdc, 0x2a, 0x6f, 0x2e, 0x75, 0xb2, 0xf0, 0x7a, 0xec, 0x7e, 0x99, 0x83,
	0xb5, 0x23, 0x19, 0x7f, 0x8e, 0xea, 0xbe, 0x08, 0x07, 0x28, 0x95, 0x20, 0x8a, 0x8b, 0xbd, 0x28,
	0x12, 0x28, 0xa5, 0xbb, 0x01, 0xcb, 0xa6, 0x6b, 0x97, 0x18, 0xc4, 0xb2, 0xbc, 0x69, 0xd0, 0xac,
	0xec, 0x4d, 0x58, 0xe9, 0x09, 0x1a, 0xc5, 0x28, 0xce, 0xeb, 0x0c, 0xe3, 0x65, 0x0b, 0x67, 0x85,
	0x6f, 0xc1, 0xcb, 0x38, 0x55, 0x28, 0x18, 0x19, 0x9e, 0x57, 0x96, 0x75, 0xe5, 0x4a, 0x86, 0x67,
	0xa5, 0x1f, 0xc2, 0x62, 0x84, 0x23, 0x2e, 0xa9, 0xd2, 0x12, 0xaa, 0x3b, 0x6b, 0xbe, 0xdd, 0x94,
	0x74, 0xdf, 0x7c, 0xbb, 0x6f, 0xfe, 0x01, 0xa7, 0x6c, 0x7f, 0xfe, 0xf1, 0xd3, 0x66, 0xa9, 0x93,
	0xd5, 0x17, 0x0c, 0x58, 0x28, 0x1a, 0xf0, 0xd1, 0x37, 0xcf, 0x1e, 0x6d, 0x15, 0x74, 0x7d, 0xff,
	0xec, 0xd1, 0xd6, 0x7a, 0xee, 0xdd, 0x98, 0x69, 0x89, 0xf7, 0x87, 0x03, 0xaf, 0x1c, 0xc9, 0x78,
	0x2f, 0x8a, 0xcc, 0x24, 0x3f, 0xb1, 0x97, 0x5e, 0xd1, 0xaa, 0xf7, 0xa1, 0x42, 0x12, 0x3e, 0x66,
	0x4a, 0x3b, 0x74, 0x05, 0x55, 0xb6, 0xbc, 0x20, 0xaa, 0x5c, 0x14, 0xf5, 0xde, 0x0c, 0x51, 0x8d,
	0x8b, 0xa2, 0x8a, 0xb4, 0xbd, 0x6f, 0xe7, 0xe0, 0x96, 0x16, 0xcb, 0xa2, 0x87, 0xfc, 0x53, 0x3b,
	0x03, 0xf7, 0x35, 0xa8, 0x48, 0x64, 0x11, 0x0a, 0x2b, 0xc2, 0x46, 0xae, 0x0b, 0xf3, 0x11, 0x4a,
	0x65, 0xa7, 0xab, 0x9f, 0x73, 0x8a, 0xca, 0xd7, 0x53, 0xf4, 0x31, 0x80, 0x59, 0x8f, 0x6e, 0x1f,
	0xf1, 0xaa, 0x43, 0x5e, 0x32, 0x47, 0x0e, 0x11, 0x2f, 0x1b, 0xf3, 0x3b, 0xa9, 0x23, 0x96, 0x78,
	0xea, 0xc4, 0x9d, 0xe2, 0x78, 0xf3, 0x8a, 0xbd, 0x3d, 0xfb, 0x1a, 0xe4, 0xc1, 0x0e, 0xca, 0x11,
	0x67, 0x12, 0xdd, 0x75, 0x58, 0xe6, 0x63, 0x15, 0x73, 0xca, 0xe2, 0xae, 0x9a, 0x76, 0x69, 0xa4,
	0x6d, 0x99, 0xef, 0xdc, 0xc8, 0xd0, 0x87, 0xd3, 0x76, 0xe4, 0xfd, 0xec, 0xc0, 0xed, 0x23, 0x19,
	0x1f, 0x10, 0x16, 0xe2, 0xb0, 0x60, 0xe8, 0x06, 0x2c, 0x2b, 0x41, 0x98, 0x24, 0x61, 0xfa, 0xf2,
	0x3e, 0xef, 0x70, 0x33, 0x87, 0xb6, 0xa3, 0x9c, 0xef, 0x73, 0x17, 0x7c, 0xbf, 0x64, 0xf8, 0x3b,
	0x05, 0xa9, 0xde, 0x45, 0xa9, 0xff, 0xc7, 0xc8, 0x7b, 0x03, 0x9a, 0x33, 0x52, 0x99, 0x6c, 0xef,
	0xf7, 0x39, 0x58, 0x39, 0x92, 0x71, 0x07, 0xbf, 0x1e, 0xa3, 0x54, 0xfb, 0x44, 0x85, 0x83, 0x99,
	0x9b, 0xb1, 0x0a, 0x0b, 0x11, 0x32, 0x9e, 0x58, 0xe2, 0x26, 0x70, 0x3f, 0x83, 0x6a, 0x42, 0x19,
	0x4d, 0xc6, 0x89, 0x9e, 0xb1, 0x26, 0xbe, 0xff, 0x76, 0x3a, 0xc8, 0xbf, 0x9f, 0x36, 0x5f, 0x35,
	0xa3, 0x96, 0xd1, 0x57, 0x3e, 0xe5, 0x41, 0x42, 0xd4, 0xc0, 0x6f, 0x33, 0xf5, 0xe7, 0xaf, 0x77,
	0xc1, 0xee, 0x40, 0x9b, 0xa9, 0x0e, 0xd8, 0xf3, 0xe9, 0xc0, 0x9b, 0x50, 0xed, 0x23, 0x76, 0x05,
	0x86, 0x48, 0x27, 0xd9, 0x3f, 0x1b, 0xf4, 0x11, 0x3b, 0x06, 0xb9, 0x64, 0x23, 0xdc, 0x43, 0x78,
	0x29, 0x5d, 0x2b, 0x4d, 0xa5, 0x72, 0x7d, 0x2a, 0x8b, 0xe9, 0xe1, 0x43, 0xc4, 0xdd, 0xad, 0x82,
	0xdd, 0xf5, 0x8b, 0x76, 0xe7, 0xfd, 0xf2, 0x76, 0xf5, 0x4e, 0xe4, 0xa1, 0xf3, 0xad, 0x6a, 0x42,
	0xb5, 0x97, 0x02, 0x5d, 0xc6, 0x59, 0x88, 0x76, 0x21, 0x40, 0x43, 0xf7, 0x52, 0x64, 0xbf, 0xfd,
	0xf8, 0xb4, 0xe1, 0x3c, 0x39, 0x6d, 0x38, 0xff, 0x9c, 0x36, 0x9c, 0x1f, 0xce, 0x1a, 0xa5, 0x27,
	0x67, 0x8d, 0xd2, 0x5f, 0x67, 0x8d, 0xd2, 0x97, 0x41, 0x4c, 0xd5, 0x60, 0xdc, 0xf3, 0x43, 0x9e,
	0x04, 0xfd, 0x31, 0xd3, 0xeb, 0x33, 0x0d, 0xfa, 0xd3, 0xbb, 0x21, 0x17, 0x18, 0x4c, 0xf3, 0x5f,
	0x79, 0xfd, 0x89, 0xef, 0x55, 0xf4, 0xb7, 0xf4, 0xdd, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0xef,
	0x46, 0x6c, 0xb8, 0x4c, 0x08, 0x00, 0x00,
}

func (m *InitCrossChainParamsProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InitCrossChainParamsProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InitCrossChainParamsProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainName) > 0 {
		i -= len(m.ChainName)
		copy(dAtA[i:], m.ChainName)
		i = encodeVarintLegacy(dAtA, i, uint64(len(m.ChainName)))
		i--
		dAtA[i] = 0x22
	}
	if m.Params != nil {
		{
			size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLegacy(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintLegacy(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintLegacy(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateChainOraclesProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateChainOraclesProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateChainOraclesProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainName) > 0 {
		i -= len(m.ChainName)
		copy(dAtA[i:], m.ChainName)
		i = encodeVarintLegacy(dAtA, i, uint64(len(m.ChainName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Oracles) > 0 {
		for iNdEx := len(m.Oracles) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Oracles[iNdEx])
			copy(dAtA[i:], m.Oracles[iNdEx])
			i = encodeVarintLegacy(dAtA, i, uint64(len(m.Oracles[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintLegacy(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintLegacy(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetOrchestratorAddress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetOrchestratorAddress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetOrchestratorAddress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainName) > 0 {
		i -= len(m.ChainName)
		copy(dAtA[i:], m.ChainName)
		i = encodeVarintLegacy(dAtA, i, uint64(len(m.ChainName)))
		i--
		dAtA[i] = 0x2a
	}
	{
		size, err := m.Deposit.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLegacy(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.ExternalAddress) > 0 {
		i -= len(m.ExternalAddress)
		copy(dAtA[i:], m.ExternalAddress)
		i = encodeVarintLegacy(dAtA, i, uint64(len(m.ExternalAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.BridgerAddress) > 0 {
		i -= len(m.BridgerAddress)
		copy(dAtA[i:], m.BridgerAddress)
		i = encodeVarintLegacy(dAtA, i, uint64(len(m.BridgerAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OracleAddress) > 0 {
		i -= len(m.OracleAddress)
		copy(dAtA[i:], m.OracleAddress)
		i = encodeVarintLegacy(dAtA, i, uint64(len(m.OracleAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddOracleDeposit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddOracleDeposit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddOracleDeposit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainName) > 0 {
		i -= len(m.ChainName)
		copy(dAtA[i:], m.ChainName)
		i = encodeVarintLegacy(dAtA, i, uint64(len(m.ChainName)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLegacy(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.OracleAddress) > 0 {
		i -= len(m.OracleAddress)
		copy(dAtA[i:], m.OracleAddress)
		i = encodeVarintLegacy(dAtA, i, uint64(len(m.OracleAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSendToExternal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSendToExternal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSendToExternal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainName) > 0 {
		i -= len(m.ChainName)
		copy(dAtA[i:], m.ChainName)
		i = encodeVarintLegacy(dAtA, i, uint64(len(m.ChainName)))
		i--
		dAtA[i] = 0x2a
	}
	{
		size, err := m.BridgeFee.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLegacy(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLegacy(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Dest) > 0 {
		i -= len(m.Dest)
		copy(dAtA[i:], m.Dest)
		i = encodeVarintLegacy(dAtA, i, uint64(len(m.Dest)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintLegacy(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSendToExternalResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSendToExternalResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSendToExternalResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OutgoingTxId != 0 {
		i = encodeVarintLegacy(dAtA, i, uint64(m.OutgoingTxId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgCancelSendToExternal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelSendToExternal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelSendToExternal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainName) > 0 {
		i -= len(m.ChainName)
		copy(dAtA[i:], m.ChainName)
		i = encodeVarintLegacy(dAtA, i, uint64(len(m.ChainName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintLegacy(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x12
	}
	if m.TransactionId != 0 {
		i = encodeVarintLegacy(dAtA, i, uint64(m.TransactionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgCancelSendToExternalResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelSendToExternalResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelSendToExternalResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRequestBatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRequestBatch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRequestBatch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.BaseFee.Size()
		i -= size
		if _, err := m.BaseFee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLegacy(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if len(m.ChainName) > 0 {
		i -= len(m.ChainName)
		copy(dAtA[i:], m.ChainName)
		i = encodeVarintLegacy(dAtA, i, uint64(len(m.ChainName)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.FeeReceive) > 0 {
		i -= len(m.FeeReceive)
		copy(dAtA[i:], m.FeeReceive)
		i = encodeVarintLegacy(dAtA, i, uint64(len(m.FeeReceive)))
		i--
		dAtA[i] = 0x22
	}
	{
		size := m.MinimumFee.Size()
		i -= size
		if _, err := m.MinimumFee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLegacy(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintLegacy(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintLegacy(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRequestBatchResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRequestBatchResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRequestBatchResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BatchNonce != 0 {
		i = encodeVarintLegacy(dAtA, i, uint64(m.BatchNonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintLegacy(dAtA []byte, offset int, v uint64) int {
	offset -= sovLegacy(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *InitCrossChainParamsProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovLegacy(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovLegacy(uint64(l))
	}
	if m.Params != nil {
		l = m.Params.Size()
		n += 1 + l + sovLegacy(uint64(l))
	}
	l = len(m.ChainName)
	if l > 0 {
		n += 1 + l + sovLegacy(uint64(l))
	}
	return n
}

func (m *UpdateChainOraclesProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovLegacy(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovLegacy(uint64(l))
	}
	if len(m.Oracles) > 0 {
		for _, s := range m.Oracles {
			l = len(s)
			n += 1 + l + sovLegacy(uint64(l))
		}
	}
	l = len(m.ChainName)
	if l > 0 {
		n += 1 + l + sovLegacy(uint64(l))
	}
	return n
}

func (m *MsgSetOrchestratorAddress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OracleAddress)
	if l > 0 {
		n += 1 + l + sovLegacy(uint64(l))
	}
	l = len(m.BridgerAddress)
	if l > 0 {
		n += 1 + l + sovLegacy(uint64(l))
	}
	l = len(m.ExternalAddress)
	if l > 0 {
		n += 1 + l + sovLegacy(uint64(l))
	}
	l = m.Deposit.Size()
	n += 1 + l + sovLegacy(uint64(l))
	l = len(m.ChainName)
	if l > 0 {
		n += 1 + l + sovLegacy(uint64(l))
	}
	return n
}

func (m *MsgAddOracleDeposit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OracleAddress)
	if l > 0 {
		n += 1 + l + sovLegacy(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovLegacy(uint64(l))
	l = len(m.ChainName)
	if l > 0 {
		n += 1 + l + sovLegacy(uint64(l))
	}
	return n
}

func (m *MsgSendToExternal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovLegacy(uint64(l))
	}
	l = len(m.Dest)
	if l > 0 {
		n += 1 + l + sovLegacy(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovLegacy(uint64(l))
	l = m.BridgeFee.Size()
	n += 1 + l + sovLegacy(uint64(l))
	l = len(m.ChainName)
	if l > 0 {
		n += 1 + l + sovLegacy(uint64(l))
	}
	return n
}

func (m *MsgSendToExternalResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OutgoingTxId != 0 {
		n += 1 + sovLegacy(uint64(m.OutgoingTxId))
	}
	return n
}

func (m *MsgCancelSendToExternal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TransactionId != 0 {
		n += 1 + sovLegacy(uint64(m.TransactionId))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovLegacy(uint64(l))
	}
	l = len(m.ChainName)
	if l > 0 {
		n += 1 + l + sovLegacy(uint64(l))
	}
	return n
}

func (m *MsgCancelSendToExternalResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRequestBatch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovLegacy(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovLegacy(uint64(l))
	}
	l = m.MinimumFee.Size()
	n += 1 + l + sovLegacy(uint64(l))
	l = len(m.FeeReceive)
	if l > 0 {
		n += 1 + l + sovLegacy(uint64(l))
	}
	l = len(m.ChainName)
	if l > 0 {
		n += 1 + l + sovLegacy(uint64(l))
	}
	l = m.BaseFee.Size()
	n += 1 + l + sovLegacy(uint64(l))
	return n
}

func (m *MsgRequestBatchResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BatchNonce != 0 {
		n += 1 + sovLegacy(uint64(m.BatchNonce))
	}
	return n
}

func sovLegacy(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLegacy(x uint64) (n int) {
	return sovLegacy(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *InitCrossChainParamsProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLegacy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InitCrossChainParamsProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InitCrossChainParamsProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLegacy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLegacy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLegacy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Params == nil {
				m.Params = &Params{}
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLegacy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLegacy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLegacy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateChainOraclesProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLegacy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateChainOraclesProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateChainOraclesProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLegacy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLegacy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Oracles", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLegacy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Oracles = append(m.Oracles, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLegacy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLegacy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLegacy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetOrchestratorAddress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLegacy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetOrchestratorAddress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetOrchestratorAddress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OracleAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLegacy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OracleAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLegacy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BridgerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLegacy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deposit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLegacy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Deposit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLegacy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLegacy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLegacy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddOracleDeposit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLegacy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddOracleDeposit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddOracleDeposit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OracleAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLegacy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OracleAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLegacy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLegacy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLegacy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLegacy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSendToExternal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLegacy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSendToExternal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSendToExternal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLegacy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dest", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLegacy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dest = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLegacy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLegacy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BridgeFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLegacy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLegacy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLegacy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSendToExternalResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLegacy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSendToExternalResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSendToExternalResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutgoingTxId", wireType)
			}
			m.OutgoingTxId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutgoingTxId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLegacy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLegacy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancelSendToExternal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLegacy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelSendToExternal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelSendToExternal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionId", wireType)
			}
			m.TransactionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TransactionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLegacy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLegacy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLegacy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLegacy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancelSendToExternalResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLegacy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelSendToExternalResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelSendToExternalResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipLegacy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLegacy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRequestBatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLegacy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRequestBatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRequestBatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLegacy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLegacy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinimumFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLegacy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinimumFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeReceive", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLegacy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeeReceive = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLegacy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLegacy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLegacy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BaseFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLegacy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLegacy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRequestBatchResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLegacy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRequestBatchResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRequestBatchResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchNonce", wireType)
			}
			m.BatchNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLegacy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BatchNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLegacy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLegacy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLegacy(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLegacy
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLegacy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLegacy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLegacy
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLegacy
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLegacy
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLegacy        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLegacy          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLegacy = fmt.Errorf("proto: unexpected end of group")
)
